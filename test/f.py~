import matplotlib.pyplot as plt
import networkx as nx

# Входные данные
words = ['gge', 'edg', 'egc', 'gd', 'fcc', 'cga', 'bbc', 'ade']


# Функция для обработки слов по алгоритму
def process_words(words):
    result = []
    # 1. Входное слово
    input_word = words[0]
    result.append(f"Input: {input_word}")

    # 2 и 3. Выходные слова
    output1 = words[1]
    output2 = words[2]
    result.append(f"Output 1: {output1}")
    result.append(f"Output 2: {output2}")

    # 4. Разбиение (2 буквы)
    split_word = words[3]
    result.append(f"Split: {split_word} (2 letters)")

    # 5 и 6. Блоки после разбиения
    block5 = words[4]
    block6 = words[5]
    result.append(f"Block 5: {block5}")
    result.append(f"Block 6: {block6}")

    # 7. Объединение 5 и 6
    combined = words[6]
    result.append(f"Combined (5+6): {combined}")

    # 8. Финальный блок
    final = words[7]
    result.append(f"Final: {final}")

    return result


# Функция для построения схемы алгоритма
def draw_scheme():
    G = nx.DiGraph()

    # Узлы (блоки)
    nodes = [
        "Input\n(gge)", "Output 1\n(edg)", "Output 2\n(egc)",
        "Split\n(gd)", "Block 5\n(fcc)", "Block 6\n(cga)",
        "Combined\n(bbc)", "Final\n(ade)"
    ]

    # Добавляем узлы
    G.add_nodes_from(nodes)

    # Ребра (связи между блоками)
    edges = [
        ("Input\n(gge)", "Output 1\n(edg)"),
        ("Input\n(gge)", "Output 2\n(egc)"),
        ("Input\n(gge)", "Split\n(gd)"),
        ("Split\n(gd)", "Block 5\n(fcc)"),
        ("Split\n(gd)", "Block 6\n(cga)"),
        ("Block 5\n(fcc)", "Combined\n(bbc)"),
        ("Block 6\n(cga)", "Combined\n(bbc)"),
        ("Combined\n(bbc)", "Final\n(ade)")
    ]

    # Добавляем ребра
    G.add_edges_from(edges)

    # Настройка расположения узлов
    pos = {
        "Input\n(gge)": (0, 4),
        "Output 1\n(edg)": (-1, 3),
        "Output 2\n(egc)": (1, 3),
        "Split\n(gd)": (0, 2),
        "Block 5\n(fcc)": (-1, 1),
        "Block 6\n(cga)": (1, 1),
        "Combined\n(bbc)": (0, 0),
        "Final\n(ade)": (0, -1)
    }

    # Рисуем граф
    plt.figure(figsize=(10, 8))
    nx.draw(G, pos, with_labels=True, node_color='lightblue',
            node_size=3000, font_size=10, font_weight='bold',
            arrowsize=20, edge_color='gray')
    plt.title("Algorithm Scheme", fontsize=14)

    # Сохраняем схему
    plt.savefig('algorithm_scheme.png')


# Выполняем обработку слов
result = process_words(words)

# Выводим результат обработки
for step in result:
    print(step)

# Строим и сохраняем схему
draw_scheme()